package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"time"
)

const (
	apiURL        = "https://aidetector.ai/"
	clientTimeout = 15 * time.Second // Timeout for the HTTP request
)

// AIRequestPayload is the structure for the JSON request body.
type AIRequestPayload struct {
	Text string `json:"text"`
}

// AIResponse is the structure for parsing the JSON response.
// We only include the fields we are interested in.
type AIResponse struct {
	Status    string  `json:"status"`
	Message   string  `json:"message,omitempty"` // omitempty if the field might be absent
	Score     float64 `json:"score"`
	LikelyAI  bool    `json:"likely_ai"`
	// You can add other fields if needed, e.g., Sentences
	// Sentences []struct {
	// 	Text  string  `json:"text"`
	// 	Score float64 `json:"score"`
	// } `json:"sentences"`
}

// detectAIText sends text for analysis and returns the result.
func detectAIText(textToAnalyze string) (*AIResponse, error) {
	// 1. Prepare the request body
	requestPayload := AIRequestPayload{
		Text: textToAnalyze,
	}
	jsonData, err := json.Marshal(requestPayload)
	if err != nil {
		return nil, fmt.Errorf("error serializing JSON request: %w", err)
	}

	// 2. Create HTTP request
	req, err := http.NewRequest("POST", apiURL, bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("error creating HTTP request: %w", err)
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/json")
	// Some APIs might require a User-Agent
	req.Header.Set("User-Agent", "GoAIDetectorClient/1.0")

	// 3. Execute the request
	client := &http.Client{
		Timeout: clientTimeout,
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error executing HTTP request: %w", err)
	}
	defer resp.Body.Close()

	// 4. Read the response body
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}

	// 5. Check status code
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API returned error %s: %s", resp.Status, string(bodyBytes))
	}

	// 6. Parse JSON response
	var apiResponse AIResponse
	err = json.Unmarshal(bodyBytes, &apiResponse)
	if err != nil {
		// Include the body in the error message for easier debugging if JSON parsing fails
		return nil, fmt.Errorf("error deserializing JSON response: %w. Response body: %s", err, string(bodyBytes))
	}

	// 7. Additional check of the status from the API response itself
	if apiResponse.Status != "success" {
		return &apiResponse, fmt.Errorf("API reported an error: %s. Message: %s", apiResponse.Status, apiResponse.Message)
	}

	return &apiResponse, nil
}

func main() {
	// Example text written by a human
	humanText := "Yesterday I went to the store and bought milk. The weather was great, the sun was shining. I was in a good mood."

	// Example text that might be generated by AI
	// (Taken from ChatGPT with the prompt "write a short text about the importance of AI")
	aiText := "Artificial intelligence opens new horizons in technological development, automating routine tasks and promoting the creation of innovative solutions in medicine, education, and industry. Its potential to improve the quality of life is enormous."

	// Short text; the API might have limitations on minimum text length
	shortText := "Hello world."

	textsToTest := []struct {
		name string
		text string
	}{
		{"Human-written Text", humanText},
		{"AI-like Text", aiText},
		{"Short Text", shortText},
	}

	for _, tt := range textsToTest {
		fmt.Printf("Analyzing text: \"%s\"\n", tt.name)
		result, err := detectAIText(tt.text)
		if err != nil {
			log.Printf("Error for '%s': %v\n", tt.name, err)
			fmt.Println("--------------------------------------------------")
			continue
		}

		fmt.Printf("  API Status: %s\n", result.Status)
		fmt.Printf("  AI Probability: %.2f%%\n", result.Score*100)
		fmt.Printf("  Likely AI: %t\n", result.LikelyAI)
		if result.Message != "" {
			fmt.Printf("  API Message: %s\n", result.Message)
		}
		fmt.Println("--------------------------------------------------")
	}
}
